// Firestore Security Rules - User-specific access control
// Each user can only access their own data

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for validation
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidTransaction() {
      return request.resource.data.keys().hasAll(['userId', 'amount', 'category', 'date']) &&
             request.resource.data.userId == request.auth.uid &&
             request.resource.data.amount is number &&
             request.resource.data.category is string &&
             request.resource.data.date is timestamp;
    }
    
    function isValidProduct() {
      return request.resource.data.keys().hasAll(['userId', 'nombre', 'precio', 'fecha']) &&
             request.resource.data.userId == request.auth.uid &&
             request.resource.data.precio is number &&
             request.resource.data.nombre is string &&
             request.resource.data.fecha is timestamp &&
             // Allow optional fields
             (request.resource.data.keys().hasOnly(['userId', 'nombre', 'precio', 'fecha', 'marca', 'supermercado', 'ubicacion', 'porPeso', 'porLitro', 'cantidad', 'precioKilo', 'peso', 'precioLitro', 'litros', 'total', 'metodoPago', 'createdAt', 'transactionId']));
    }
    
    // User profiles - users can only access their own profile
    match /userProfiles/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Finance profiles - users can only access their own finance profile
    match /financeProfiles/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Transactions - users can only access their own transactions
    match /transactions/{transactionId} {
      allow read, delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        isValidTransaction();
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Product price history - users can only access their own product data
    match /productos-historial/{productId} {
      allow read, delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        isValidProduct();
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // User-specific data collections
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      
      // Subcollections under user documents
      match /{subcollection}/{document} {
        allow read, write: if isOwner(userId);
        
        // Nested subcollections
        match /{nestedCollection}/{nestedDocument} {
          allow read, write: if isOwner(userId);
        }
      }
    }
    
    // Compras (shopping) data - user-specific
    match /compras/{compraId} {
      allow read, delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == request.auth.uid;
    }
    
    // Analytics data - user-specific
    match /analytics/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Debts - user-specific
    match /debts/{debtId} {
      allow read, delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == request.auth.uid;
    }
    
    // Test connection - restricted to authenticated users only
    // Remove in production
    match /test-connection/{docId} {
      allow read, write: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
